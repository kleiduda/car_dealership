{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Directive, Inject, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { CountUp } from 'countup.js';\nimport { isPlatformBrowser } from '@angular/common';\n\nclass CountUpDirective {\n  constructor(el, zone, platformId) {\n    this.el = el;\n    this.zone = zone;\n    this.platformId = platformId;\n    this.options = {};\n    this.reanimateOnClick = true; // eslint-disable-next-line @angular-eslint/no-output-native\n\n    this.complete = new EventEmitter();\n  } // Re-animate if preference is set.\n\n\n  onClick() {\n    if (this.reanimateOnClick) {\n      this.animate();\n    }\n  }\n\n  ngOnChanges(changes) {\n    // don't animate server-side (universal)\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    if (changes.endVal && changes.endVal.currentValue !== undefined) {\n      if (this.previousEndVal !== undefined) {\n        this.options = Object.assign(Object.assign({}, this.options), {\n          startVal: this.previousEndVal\n        });\n      }\n\n      this.countUp = new CountUp(this.el.nativeElement, this.endVal, this.options);\n      this.animate();\n      this.previousEndVal = this.endVal;\n    }\n  }\n\n  animate() {\n    this.zone.runOutsideAngular(() => {\n      this.countUp.reset();\n      this.countUp.start(() => {\n        this.zone.run(() => {\n          this.complete.emit();\n        });\n      });\n    });\n  }\n\n}\n\nCountUpDirective.ɵfac = function CountUpDirective_Factory(t) {\n  return new (t || CountUpDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nCountUpDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CountUpDirective,\n  selectors: [[\"\", \"countUp\", \"\"]],\n  hostBindings: function CountUpDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function CountUpDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  inputs: {\n    endVal: [\"countUp\", \"endVal\"],\n    options: \"options\",\n    reanimateOnClick: \"reanimateOnClick\"\n  },\n  outputs: {\n    complete: \"complete\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountUpDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[countUp]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    endVal: [{\n      type: Input,\n      args: ['countUp']\n    }],\n    options: [{\n      type: Input\n    }],\n    reanimateOnClick: [{\n      type: Input\n    }],\n    complete: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\nclass CountUpModule {}\n\nCountUpModule.ɵfac = function CountUpModule_Factory(t) {\n  return new (t || CountUpModule)();\n};\n\nCountUpModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CountUpModule\n});\nCountUpModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountUpModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [CountUpDirective],\n      exports: [CountUpDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of count-up\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CountUpDirective, CountUpModule }; //# sourceMappingURL=ngx-countup.mjs.map","map":null,"metadata":{},"sourceType":"module"}